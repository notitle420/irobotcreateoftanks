<!doctype html>
<html>
<head>
  <title>iRobot Create of Tanks</title>
  <link rel="stylesheet" href="stylesheets/style.css">
  <!-- <script src="http://localhost:8080/socket.io/socket.io.js"></script> -->
  <script src="http://192.168.1.3:8080/socket.io/socket.io.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
  <script src="javascripts/control.js"></script>
  <script src="javascripts/jquery.knob.js"></script>

  <script language="javascript" type="text/javascript">
  //const socket = io.connect("http://localhost:8080");
  const socket = io.connect("http://192.168.1.3:8080");
  </script>


</head>
<body>
  <div id="modalWindow">
  <div>
    <form id="registNickname" action="" onsubmit="return false;">
      <p>Enter your name</p>
      <input id="nickname" autocomplete="off" placeholder="your name"/>
      <button>Enter</button>
    </form>
  </div>
</div>
  <div id="output"></div>
  <div id="site-box">
    <!-- ページ全体のボックス -->
    <div id="header-box">
      <!-- ヘッダー -->
      <h3>iRobot Create of Tanks</h3>

      <div id="camera-box">
        <!-- 砲台のカメラとおしりに乗せるカメラの映像を出すやつのボックス -->
        <div id="houdai-box">
          <!--<img src="http://localhost:15000/?action=stream"> -->
        </div>

        <div id="back-box">
          <!--<img src="http://localhost:15001/?action=stream"> -->
        </div>

      </div>

      <div id="controller-box">
        <!-- 砲台カメラとうしろのカメラと本体のコントローラーのボックス -->
        <!-- var wsh = new ActiveXObject("WScript.Shell");
        wsh.exec("cmd /C コマンドプロンプトに書き込む内容"); -->
        <div id="control-houdai-box">
          <!-- 砲台のカメラの操作 -->
          <h3>Battery</h3>
          <div class="servo_battery">
            <input type="text" class="dial_battery">
          </div>
          <!-- <div><a id="reset_btn_battery" class="btn">RESET</a></div> -->
          <div><a id = "shoot_button" input type="button" onClick= "control_battery_shoot()" class="btn">発射</a></div>
        </div>

        <div id="control-back-box">
          <!-- iRobot Createのおしりに乗せるカメラの操作 -->
          <h3>Camera</h3>
          <div class="servo_back">
            <input type="text" class="dial_back">
          </div>
          <!-- <div><a id="reset_btn_back" class="btn">RESET</a></div> -->
        </div>

        <div id="control-body-box">
          <h3>iRobot Create</h3>
          <div id="control-body-box-button">
            &emsp;&emsp;&emsp;<input type="button" onMouseDown="start('body_straight');" ontouchstart="start('body_straight');" onMouseUp="stop('body_straight');" onmouseout="stop('body_straight');" ontouchend="stop('body_straight');" class="btn" value="前進">
            <br>
            <input type="button" onMouseDown="start('body_left');" ontouchstart="start('body_left');" onMouseUp="stop('body_left');" onmouseout="stop('body_left');" ontouchend="stop('body_left');" class="btn" value="左">
            <input type="button" onMouseDown="start('body_stop');" ontouchstart="start('body_stop');" onMouseUp="stop('body_stop');" onmouseout="stop('body_stop');" ontouchend="stop('body_stop');" class="btn" value="止">
            <input type="button" onMouseDown="start('body_right');" ontouchstart="start('body_right');" onMouseUp="stop('body_right');" onmouseout="stop('body_right');" ontouchend="stop('body_right');" class="btn" value="右">
            <br>
            &emsp;&emsp;&emsp;<input type="button" onMouseDown="start('body_back');" ontouchstart="start('body_back');" onMouseUp="stop('body_back');" onmouseout="stop('body_back');" ontouchend="stop('body_back');" class="btn" value="後進">
          </div>
        </div>

      </div>


      <div id="Right-box">
        <!-- 右側(ステータスとチャット)のボックス -->
        <div id="status-box">
          <h3>Status</h3>
          <p id="members">参加者：<span></span></p>
          <br>
          <p></p>
        </div>

        <div id="chat-box">
          <h3>Chat</h3>
          <div id="bottom-fixed">
            <form id="inputArea" action="" onsubmit="return false;">
              <input id="m" autocomplete="off" placeholder="message"/>
              <button>Send</button>
            </form>
            <ul id="system-text"></ul>
          </div>
          <div id="controlainer">
            <ul id="messages"></ul>
          </div>
        </div>
        <script type="text/javascript">
        'use strict';
        document.addEventListener('DOMContentLoaded', function(event) {
          const $sendBtn     = document.querySelector('#inputArea button');
          const $m           = document.querySelector('#m');
          const $systemText  = document.querySelector('#system-text');
          const $messages    = document.querySelector('#messages');
          const $members     = document.querySelector('#members span');
          const $modalWindow = document.querySelector('#modalWindow')
          const $nickname    = document.querySelector('#nickname');
          const $modalBtn    = document.querySelector('#registNickname button');
          // ==============================
          // クライアントから送信
          // ==============================
          // 入室
          $modalBtn.addEventListener('click', function(event) {
            socket.emit('enter room', $nickname.value);
            $modalWindow.parentNode.removeChild($modalWindow);
          });
          // テキスト入力
          let nowTyping = false;
          $m.addEventListener('keydown', function(event) {
            socket.emit('start typing');
          });
          // テキスト送信
          $sendBtn.addEventListener("click", function(event) {
            socket.emit('chat message', $m.value);
            $m.value = "";
          }, false);
          // ==============================
          // サーバーからの受信後処理
          // ==============================
          socket.on('newcomer joined', function(nickname) { // 誰かが入室した時
            $('#messages').prepend(nickname + 'joined' + '<br>');
          });
          socket.on('the number of users', (login_users) => { // 参加者に変動があったとき
            $members.innerHTML = Object.values(login_users).join(", ");
          });
          socket.on('user disconnect', function(exituser) { // 参加者が退出した時
            $('#messages').prepend(exituser + 'exit' + '<br>');
          });
          socket.on('start typing', function(typinguser) { // 誰かが文字入力を初めた時
            $systemText.innerHTML += typinguser + ' is now typing...';
          });
          socket.on('stop typing', function() { // 誰かが文字入力を止めた時
            $systemText.innerHTML = '';
          });
          socket.on('chat message', function(data) { // 誰かがテキストを送信した時
            //$messages.innerHTML += '<li><span>' + data.nickname + '：</span>' + data.msg + '</li>';
            $('#messages').prepend(data.nickname + '：' + data.msg + '<br>')
            $systemText.innerHTML = '';
          });
        });
        </script>
      </div>


      <div id="footer-box">
        <!-- フッター -->
        <p>基盤システム特論5班</p>
      </div>

    </div>

  </body>
  </html>
